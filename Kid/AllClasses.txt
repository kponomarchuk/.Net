using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Configuration;

namespace ConsoleCryKid
{

    public static class AttractionSettings
    {
        public static int MinBoyHeighForBatman;

        public static int MinGirlHeighForSwan;

        public static int MaxGirlHeighForSwan;

        public static int MaxBoyHeighForSwan;

        static AttractionSettings() // static constructor
        {
            Int32.TryParse(ConfigurationManager.AppSettings["MinBoyHeighForBatman"], out MinBoyHeighForBatman);
            Int32.TryParse(ConfigurationManager.AppSettings["MinGirlHeighForSwan"], out MinGirlHeighForSwan);
            Int32.TryParse(ConfigurationManager.AppSettings["MaxGirlHeighForSwan"], out MaxGirlHeighForSwan);
            Int32.TryParse(ConfigurationManager.AppSettings["MaxBoyHeighForSwan"], out MaxBoyHeighForSwan);
            //MinBoyHeighForBatman = 150;
            //MinGirlHeighForSwan = 120;
            //MaxGirlHeighForSwan = 140;
            //MaxBoyHeighForSwan = 160;

        }

    }
    public enum DayOfWeek
    {
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
        Sunday = 7
    }
//----------------------------
public class AttractionManager
    {
        private int _cash;
        private bool _openStatus;
        private readonly int _rideCost;

        public AttractionManager() {
_cash=0;
_openStatus=true;
_rideCost=10;
}

    public int GetRideCost()
    {
        return _rideCost;
    }

    public bool GetOpenStatus()
    {
        return this._openStatus;
    }

    public void AddMoneyToCash(int vCash)
    {
        this._cash += vCash;
        if (this._cash >= 200)
        { this._openStatus = false; }
    }


    public bool CheckKid()//temporary for testing only
    {
        return true;
    }

    public bool CheckKid(DayOfWeek dayOfWeek, string gender, int height, string attract)
    {

        if (attract.ToUpper() == "BATMAN" && (((int)dayOfWeek == 1 || (int)dayOfWeek == 3 || (int)dayOfWeek == 5) && gender == "b" && height >= AttractionSettings.MinBoyHeighForBatman))
        {
            return true;
        }


        else if (attract.ToUpper() == "SWAN" && (((int)dayOfWeek == 2 || (int)dayOfWeek == 3 || (int)dayOfWeek == 4))
            && (gender == "g" && height >= AttractionSettings.MinGirlHeighForSwan && (height <= AttractionSettings.MaxGirlHeighForSwan))
            && (gender == "b" && height <= AttractionSettings.MaxBoyHeighForSwan)
        )
        {
            return true;
        }

        else if (attract.ToUpper() == "PONY" && ((int)dayOfWeek != 7))
        {

            return true;
        }

        return false;





    }

}
//----------------------------


public class Kid
{
    private int _height;
    private string _name;
    private int _happinessLevel;
    private int _money;

    Kid()
    {
        //Kid("Random", 0, 100);
        this._name="Random";
        this._height=110;
        this._money=100;
    }

    Kid(string vName, int vHeight, int vMoney)
    {
        this._name = vName;
        this._height = vHeight;
        this._money = vMoney;
    }
    public void Cry()
    {
        //this.happinessLevel-=10;
        this._height += 2;
        Console.WriteLine(this._name + " is crying :`((  and growing o__O? !!! Current height is  " + this._height);

    }
    public int GetMoney()
    {
        return this._money;
    }

    public void Ride(int attractCost)
    {

        if (_money >= attractCost)
        {
            this._money -= attractCost;
            this._happinessLevel += 10;
            Console.WriteLine(_name + " is riding attraction!!! :`(( ");
        }
        else
        {
            Console.WriteLine("Not enough money. Kid has " + _money + ". Attraction cost is " + attractCost);

        }
    }

}
class Program
    {
        static void Main(string[] args)
        {
            AttractionManager manager = new AttractionMannager();
            Kid randomKid = new Kid();
            Kid randomKid2 = new Kid();
            Kid randomKid3 = new Kid();
            while (manager.getstatusOpen())
            {
                if (manager.CheckKid() && randomKid.getMoney() > 0)
                {
                    randomKid.Ride(manager.getRideCost());
                    manager.AddMoneyToCash(manager.getRideCost());
                }
                else
                { randomKid.Cry(); }

            }
            Console.WriteLine("Good bye!!");
            Console.ReadLine();


            //Console.WriteLine("Initial parameters: "+randonKid.name+" has "+randomKid.money+" and height is "+random.kid);
        }
    }
}
